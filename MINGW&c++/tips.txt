栈
//s.empty(); //如果栈为空则返回true, 否则返回false;
//s.size(); //返回栈中元素的个数
//s.top(); //返回栈顶元素, 但不删除该元素
//s.pop(); //弹出栈顶元素, 但不返回其值
//s.push(); //将元素压入栈顶

队列
//q.empty(); //如果队列为空返回true, 否则返回false
//q.size(); //返回队列中元素的个数
//q.front(); //返回队首元素但不删除该元素
//q.pop(); //弹出队首元素但不返回其值
//q.push(); //将元素压入队列
//q.back(); //返回队尾元素的值但不删除该元素



!不要用gets()。高危


!当循环中一个值的变化与另一个值没有线性相关时，设两个变量分别表示两个值的变化


!cin>>与getline的工作方式，流提取运算符根据它后面的变量类型读取数据，从非空白符号开始，遇到Enter、Space、Tab键时结束。getline函数从istream中读取一行数据，当遇到“\n”时结束返回。造成程序错误结果的原因是，用户输入完年龄后按回车结束输入，把“\n”留在了输入流里，而cin不会主动删除输入流内的换行符，这样换行符就被getline读取到，getline遇到换行符返回，因此程序不会等待用户输入。
解决的办法是手动清除换行符，在cin>>后加上 cin.ignore();

!递归的重点是找到递归关系和递归出口。少用递归。

!递归：从已知问题的结果出发，用迭代表达式逐步推算出问题的开始的条件，即顺推法的逆过程，称为递归。


!递推：递推算法是一种用若干步可重复运算来描述复杂问题的方法。递推是序列计算中的一种常用算法。通常是通过计算机前面的一些项来得出序列中的指定象的值。


!递归与递推区别：相对于递归算法,递推算法免除了数据进出栈的过程，也就是说,不需要函数不断的向边界值靠拢,而直接从边界出发,直到求出函数值。

!函数中途的return;使得函数执行终止


广搜一般用来求最短
深搜，当状态数量庞大，而解的方案数少，如一个数独(雾)的某个解时
深搜不一定等于递归
搜索不等于递归
搜索题，顺序
一般矩阵或棋盘的题，当数据范围小时一般用搜索，大时用动态规划




string a=12;
string b=34;
a+b=1234;
b+a=3412;
a+b<b+a

getline(cin,str,'.')//以.结束,不包含.
to_string